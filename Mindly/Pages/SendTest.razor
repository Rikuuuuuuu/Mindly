@page "/sendtest"

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .sendtest-body {
        display: flex;
        justify-content: center;
        align-items: center;
        /*background-color: aqua;*/
        padding: 10%;
    }

    .flex-container {
        /*background-color: darksalmon;*/
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    #logout-button {
        position: absolute;
        right: 220px;
        top: 40px;
    }
</style>

@*<link rel="stylesheet" href="/css/header-style.css" />*@

<body>
    <header>
        <div class="header-items">
            <img class="logo-image" src="/mindlylogo.png" />
            <button id="logout-button" class="mindly-button">Log Out</button>
            <div class="line"></div>
        </div>

    </header>

    <div class="sendtest-body">
        <div class="flex-container">
            <h3>Welcome!</h3>
            <h4>Send test</h4>

            <input type="text" @bind="Email" placeholder="Email address" />
            <button class="mindly-button" type="button" @onclick="EmailValidation">Send test</button>
            <h3>@Message</h3>
        </div>
    </div>

    <p>@result@RandomString(5)</p>
    <p>@_authMessage</p>
</body>

@code { public string _authUser;
            private string _authMessage;
            public string address = "";
            public string host;
            public string result;

            public async Task GetClaimsPrincipalData()
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity.IsAuthenticated)
                {
                    _authUser = user.Identity.Name;

                    address = _authUser;

                    // using Split
                    host = address.Split('@')[1];

                    result = host.Substring(0, 3);
                }
                else
                {
                    _authMessage = "The user is NOT authenticated.";
                }
            }

            protected override async Task OnInitializedAsync()
            {
                await GetClaimsPrincipalData();
            }
}

@code
    { private static Random random = new Random();
    public static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        return new string(Enumerable.Repeat(chars, length)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }
}


@code {

    [Parameter]
    public string Email { get; set; }

    string Message;

    void EmailValidation()
    {

        if (Email == null)
        {
            Message = "Täytä tähän jotain!";
        }

        else
        {
            Message = "Jjeee mahtavaa";
        }
    }
}
