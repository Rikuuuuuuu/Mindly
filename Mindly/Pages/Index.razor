@page "/"
@using System.Net.Mail
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView>
    <Authorized>
        <!--Testin valinta-->
        <label for="testit">Choose a test</label>
        <select name="testi" id="testi" @bind="@testi">
            <option value="Testi1">Testi 1</option>
            <option value="Testi2">Testi 2</option>
        </select>
        <br><br>
        <!--Email kenttä-->
        <label for="fname">Email:</label>
        <input type="email" id="email" name="email" @bind="email" required><br><br>
        <button class="btn btn-primary" @onclick="SendMail">Send Mail</button>
        <br />

        <span style="font-weight:bold;font-size:28px;color:#c00;">@Message</span>
        @code{
            private static Random random = new Random();
            string testi = "Testi1";
            string email = "";

            private string Message { get; set; } = "";
            private void SendMail()
            {
                if (email == "")
                {
                    Message = "Field empty";
                }
                else
                {
                    try
                    {
                        using (MailMessage mail = new MailMessage())
                        {
                            mail.IsBodyHtml = true;
                            mail.From = new MailAddress("mindlytest@gmail.com");
                            mail.To.Add(email);
                            mail.Subject = "Mindly test"; //Aihe
                            Attachment attachment = new System.Net.Mail.Attachment("C:/Users/Koti/Documents/Mindly I cover letter.pdf");//Liite Päivitä oman tiedostosijainnin mukaan
                            mail.IsBodyHtml = true;

                            if (testi == "Testi1")
                            {
                                //Viesti
                                mail.Body = "Congratulations, you have been invited to take the Entrepreneurial Personality Test!<br><br>" +
                                " Please, complete the Entrepreneurial Personality Test according to the instructions below before 20th of November." +
                                " Good luck!<br><br><br>1.Open the link, " + "https://mindly.surveysparrow.com/s/mindly-meps-beta-fin/tt-03d580</a>" + "<br>" +
                                " 2. Add id, " + randomId + Id(5) + "<br> 3. Fill the survey <br> 4. Submit <br><br><br> Thank you for your cooperation.";
                                //Liite
                                mail.Attachments.Add(attachment);
                                email = "";
                            }

                            if (testi == "Testi2")
                            {
                                mail.Body = "<h2>Otsikko</h2><p>Testi2</p>";
                                email = "";
                            }

                            using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
                            {
                                //Email login
                                smtp.Credentials = new System.Net.NetworkCredential("mindlytest@gmail.com", "Koulu1234");
                                smtp.EnableSsl = true;
                                smtp.Send(mail);
                                Message = "Mail sent";
                            }
                        }
                    }
                    catch (Exception)
                    {

                    }
                }

                //Yrittäjän id:n generointi
                static string Id(int length)
                {
                    const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    return new string(Enumerable.Repeat(chars, length)
                    .Select(s => s[random.Next(s.Length)]).ToArray());
                }
            }

        }

        @code { public string _authUser;
            private string _authMessage;
            public string address = "";
            public string host;
            public string result;
            public string randomId;

            public async Task GetClaimsPrincipalData()
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity.IsAuthenticated)
                {
                    _authUser = user.Identity.Name;

                    address = _authUser;

                    // using Split
                    host = address.Split('@')[1];

                    result = host.Substring(0, 3);
                    randomId = result + RandomString(0);
                }
                else
                {
                    _authMessage = "The user is NOT authenticated.";
                }
            }

            protected override async Task OnInitializedAsync()
            {
                await GetClaimsPrincipalData();
            }
        }

        @code
            { private static Random random1 = new Random();
            public static string RandomString(int length)
            {
                const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                return new string(Enumerable.Repeat(chars, length)
                  .Select(s => s[random1.Next(s.Length)]).ToArray());
            }
        }

    </Authorized>
    <NotAuthorized>
        Log in first
    </NotAuthorized>

</AuthorizeView>
